substitutions:
  device: frisquet-boiler
  name: "Frisquet Boiler"
  prefix: "Frisquet "

esphome:
  name: ${device}
  friendly_name: ${name}

# I am using a Wemos D1 mini clone
esp8266:
  board: nodemcuv2
  #restore_from_flash: True

ota:
  platform: esphome
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  use_address: !secret static_ip_address

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${device} Fallback Hotspot"
    password: !secret ap_password

captive_portal:

external_components:
  - source: components

logger:
  # Set baud_rate to 0 to disable logging
  #baud_rate: 0
  # Disable use of flash for logs (to expand HW lifespan)
  esp8266_store_log_strings_in_flash: false
  level: DEBUG
  logs:
    sensor: INFO
    text_sensor: INFO

button:
  # Add a "restart" button in HA device configuration page
  - platform: restart
    name: "Reboot device"

switch:
  # Add a state button in HA device configuration page
  - platform: template
    name: "State Control"
    id: state_control
    restore_mode: RESTORE_DEFAULT_ON
    lambda: |-
      if (id(boiler_output).get_enabled_state()) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      - lambda: id(boiler_output).set_control_state(true);
    turn_off_action:
      - lambda: id(boiler_output).set_control_state(false);

number:
  # Max boiler setpoint configuration variable visible in home assistant
  - platform: template
    name: "Max Setpoint"
    id: max_setpoint
    icon: mdi:arrow-collapse-up
    optimistic: true
    min_value: 0
    max_value: 100
    step: 1
    unit_of_measurement: "%"
    restore_value: true
    initial_value: 100
    set_action:
      then:
        - lambda: id(boiler_output).set_max_setpoint(x);

sensor:
  # Declaration of temperature sensor used by our PID climate to regulate boiler temperature
  # NOTE : Please replace <entity_id> value by an existing temperature sensor in your HA setup
  - platform: homeassistant
    id: current_temperature
    entity_id: sensor.living_room_temperature
    unit_of_measurement: "°C"
    filters:
      - filter_out: nan
      # Setting heartbeat is a way to set pid climate working period
      # with 30s, the pid climate will compute and send a value to output every 30s
      - heartbeat: 30s
      - sliding_window_moving_average:
          window_size: 3
          send_every: 1
  
  # Sensor that sends uptime (elapsed time since last reboot) to HA
  - platform: uptime
    name: Uptime Sensor

  # Sensor that sends the current actual boiler setpoint
  - platform: template
    name: "Actual Setpoint"
    unit_of_measurement: "%"
    icon: mdi:water-boiler
    lambda: return id(boiler_output).get_current_setpoint();

    # Sensor that sends the current setpoint calculated by the PID
  - platform: pid
    name: "PID result"
    climate_id: boiler_pid
    type: RESULT

    # Sensors that send the current PID terms
  - platform: pid
    name: "PID Tp"
    climate_id: boiler_pid
    type: PROPORTIONAL
  - platform: pid
    name: "PID Td"
    climate_id: boiler_pid
    type: DERIVATIVE
  - platform: pid
    name: "PID Ti"
    climate_id: boiler_pid
    type: INTEGRAL
 
# The "frisquet_boiler" output sends setpoints (calculated by the PID) 
# to the actual boiler through a direct wire connection
# Implementation of this output is given in folder ./components/frisquet_boiler
output:
  - platform: frisquet_boiler
    id: boiler_output # required, do not change
    pin: D6           # required
    # "boiler_id" is required, it must be acquired from your Frisquet official remote (see README.md)
    # It is a 16 bits hexadecimal (example : DA3E)
    boiler_id: !secret boiler_id

    # init_delai: Delai after boot before sending first message to boiler
    #             unit: second, default: 120
    init_delai: 90
    # repeat_delai: Max duration between 2 messages sent to the boiler
    #             unit: second, default: 300
    repeat_delai: 300
    # new_setpoint_delai: Wait time before sending a new setpoint received from client
    #             unit: second, default: 5
    new_setpoint_delai: 5
    # time_to_death: Delai before stopping the boiler, in case no message are received for a long time
    #             unit: second, default: 1200
    time_to_death: 1200
    # max_setpoint: maximum setpoint value to send to the boiler
    #         range: [0, 100], default : 100
    #max_setpoint: 100


# This PID implementation is given by ESPHome
# NOTE : The pid climate sends a new setpoint to heat_output each time a temperature value is received from sensor
climate:
  - platform: pid
    id: boiler_pid
    name: "PID Climate"
    sensor: current_temperature
    # low default temperature for safety, since where is an issue with this component :
    # each time connection is lost then restored with HA, the component goes back to default, losing previous setpoint value
    default_target_temperature: 15.5°C
    heat_output: boiler_output
    control_parameters:
      kp: 0.5
      ki: 0.0004
      kd: 30.0
      min_integral: 0   # It's a boiler, not a cooler : We don't want to let the T° go under the setpoint
      max_integral: 0.8 # to avoid overshoot
      output_averaging_samples: 2
      derivative_averaging_samples: 6
      #starting_integral_term: 0.36

# Enable Home Assistant API through a secured connection
# => declare the "set_boiler_setpoint" to allow manual setting of boiler setpoint
api:
  encryption:
    key: !secret api_encryption_key